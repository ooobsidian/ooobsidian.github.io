<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LRX&#39;s Blog</title>
  <subtitle>志当存高远</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ooobsidian.github.io/"/>
  <updated>2017-08-10T13:31:39.517Z</updated>
  <id>http://ooobsidian.github.io/</id>
  
  <author>
    <name>obsidian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>POJ 2398 Toy Storage(计算几何)</title>
    <link href="http://ooobsidian.github.io/2017/08/10/POJ-2398-Toy-Storage-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    <id>http://ooobsidian.github.io/2017/08/10/POJ-2398-Toy-Storage-计算几何/</id>
    <published>2017-08-10T13:12:29.000Z</published>
    <updated>2017-08-10T13:31:39.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="http://poj.org/problem?id=2398" target="_blank" rel="external">题目</a></h1><p>描述略，此题和 <strong><em><a href="http://poj.org/problem?id=2318" target="_blank" rel="external">POJ 2318</a></em></strong> 基本是类似的，只不过最后统计的是每个分区内的玩具个数有几个，还有坑点就是题目输入的数据不像 <strong><em><a href="http://poj.org/problem?id=2318" target="_blank" rel="external">POJ 2318</a></em></strong> 的数据是按照点的坐标和线段端点点的坐标从左到右依次输入，而是乱输入的，因此需要建立结构体将其排序。给出 <strong><em><a href="http://alphalrx.cn/2017/08/10/POJ-2318-TOYS-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/" target="_blank" rel="external">POJ 2318的题解</a></em></strong> ，这道题只需注意以上两个坑点就很容易了，再给出这道题的代码。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50001</span>;</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"><span class="keyword">int</span> u[N],l[N];</div><div class="line"><span class="keyword">int</span> ans[N],an[N],bn[N];</div><div class="line"><span class="keyword">int</span> x1,x2,y1,y2;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> x,y;</div><div class="line">&#125;a[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> u,v;</div><div class="line">&#125;b[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(point a,point b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.x&lt;b.x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(line c,line d)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> c.u&lt;d.u;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">xmul</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> (x1*y2)-(x2*y1);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n,n)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;b[i].u&gt;&gt;b[i].v;</div><div class="line">            ans[i]=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans[n]=<span class="number">0</span>;</div><div class="line">        sort(b,b+n,cmp2);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;a[i].x&gt;&gt;a[i].y;</div><div class="line">        &#125;</div><div class="line">        sort(a,a+m,cmp1);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">                <span class="keyword">if</span>(xmul(a[i].x-b[j].v,a[i].y-y2,b[j].u-b[j].v,y1-y2)&lt;=<span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            ++ans[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</div><div class="line">            an[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i++)</div><div class="line">            <span class="keyword">if</span>(ans[i]&gt;<span class="number">0</span>)</div><div class="line">                an[ans[i]]++;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Box\n"</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</div><div class="line">            <span class="keyword">if</span>(an[i]&gt;<span class="number">0</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d: %d\n"</span>,i,an[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://poj.org/problem?id=2398&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;描述略，此题和 &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://poj.org/problem?id=2318&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;POJ 2318&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; 基本是类似的，只不过最后统计的是每个分区内的玩具个数有几个，还有坑点就是题目输入的数据不像 &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://poj.org/problem?id=2318&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;POJ 2318&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; 的数据是按照点的坐标和线段端点点的坐标从左到右依次输入，而是乱输入的，因此需要建立结构体将其排序。给出 &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://alphalrx.cn/2017/08/10/POJ-2318-TOYS-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;POJ 2318的题解&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; ，这道题只需注意以上两个坑点就很容易了，再给出这道题的代码。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://ooobsidian.github.io/tags/ACM/"/>
    
      <category term="数学" scheme="http://ooobsidian.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="POJ" scheme="http://ooobsidian.github.io/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2318 TOYS (计算几何)</title>
    <link href="http://ooobsidian.github.io/2017/08/10/POJ-2318-TOYS-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    <id>http://ooobsidian.github.io/2017/08/10/POJ-2318-TOYS-计算几何/</id>
    <published>2017-08-10T12:50:25.000Z</published>
    <updated>2017-08-10T13:38:31.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="http://poj.org/problem?id=2318" target="_blank" rel="external">题目</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Calculate the number of toys that land in each bin of a partitioned toy box.<br>Mom and dad have a problem - their child John never puts his toys away when he is finished playing with them. They gave John a rectangular box to put his toys in, but John is rebellious and obeys his parents by simply throwing his toys into the box. All the toys get mixed up, and it is impossible for John to find his favorite toys.</p>
<p>John’s parents came up with the following idea. They put cardboard partitions into the box. Even if John keeps throwing his toys into the box, at least toys that get thrown into different bins stay separated. The following diagram shows a top view of an example toy box.</p>
<p><img src="http://poj.org/images/2318_1.jpg" alt=""><br><a id="more"></a><br>For this problem, you are asked to determine how many toys fall into each partition as John throws them into the toy box.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input file contains one or more problems. The first line of a problem consists of six integers, $n$ $m$ $x_1$ $y_1$ $x_2$ $y_2$ . The number of cardboard partitions is $n$ $(0 &lt; n \leq 5000)$ and the number of toys is $m$ $(0 &lt; m \leq 5000)$ . The coordinates of the upper-left corner and the lower-right corner of the box are $(x_1,y_1)$ and $(x_2,y_2)$ , respectively. The following $n$ lines contain two integers per line, $U_i$ $L_i$ , indicating that the ends of the i-th cardboard partition is at the coordinates $(U_i,y_1)$ and $(L_i,y_2)$ . You may assume that the cardboard partitions do not intersect each other and that they are specified in sorted order from left to right. The next $m$ lines contain two integers per line, $X_j$ $Y_j$ specifying where the j-th toy has landed in the box. The order of the toy locations is random. You may assume that no toy will land exactly on a cardboard partition or outside the boundary of the box. The input is terminated by a line consisting of a single $0$ .</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>The output for each problem will be one line for each separate bin in the toy box. For each bin, print its bin number, followed by a colon and one space, followed by the number of toys thrown into that bin. Bins are numbered from $0$ (the leftmost bin) to $n$ (the rightmost bin). Separate the output of different problems by a single blank line.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">5 6 0 10 60 0</div><div class="line">3 1</div><div class="line">4 3</div><div class="line">6 8</div><div class="line">10 10</div><div class="line">15 30</div><div class="line">1 5</div><div class="line">2 1</div><div class="line">2 8</div><div class="line">5 5</div><div class="line">40 10</div><div class="line">7 9</div><div class="line">4 10 0 10 100 0</div><div class="line">20 20</div><div class="line">40 40</div><div class="line">60 60</div><div class="line">80 80</div><div class="line"> 5 10</div><div class="line">15 10</div><div class="line">25 10</div><div class="line">35 10</div><div class="line">45 10</div><div class="line">55 10</div><div class="line">65 10</div><div class="line">75 10</div><div class="line">85 10</div><div class="line">95 10</div><div class="line">0</div></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">0: 2</div><div class="line">1: 1</div><div class="line">2: 1</div><div class="line">3: 1</div><div class="line">4: 0</div><div class="line">5: 1</div><div class="line"></div><div class="line">0: 2</div><div class="line">1: 2</div><div class="line">2: 2</div><div class="line">3: 2</div><div class="line">4: 2</div></pre></td></tr></table></figure>
<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>As the example illustrates, toys that fall on the boundary of the box are “in” the box.</p>
<hr>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>有一个玩具盒，被 $n$ 个隔板分开成左到 $u$ 右 $n+1$ 个区域，给出每个左上角和右下角边界点的坐标，给出每个分割线两个端点的坐标，然后给每个玩具的坐标，求每个区域有几个玩具。</p>
<hr>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>判断点在直线的左右利用向量叉乘就可以判断，从线段的一个起点出发到判断点构成的向量和从判断点到另一个端点组成的向量进行叉乘，如果叉乘大于 $0$ ，那么点在直线（线段）右边，否则在直线（线段）左边。</p>
<h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><p><img src="http://images2015.cnblogs.com/blog/842992/201707/842992-20170719195248474-1358482814.png" alt=""></p>
<p>设 $\vec a=(x_1,y_1)$ , $\vec b=(x_2,y_2)$ 。\<br>点乘：内积（数量积），$\vec{a}\cdot\vec{b}=|a||b|cos\theta=x_1\cdot x_2+y_1\cdot y_2$\<br>叉乘：外积（向量积），$|\vec{c}|=|\vec{a}\times\vec{b}|=|a||b|sin\theta=x_1\cdot y_2-x_2\cdot y_1$\<br>向量积的结果是一个向量，方向用“右手法则”判断（四指为a的方向，朝手心方向摆动到b的方向，大拇指就是c的方向）</p>
<p>几何意义：</p>
<p>点乘的几何意义是：是一条边向另一条边的投影乘以另一条边的长度</p>
<p>叉乘的几何意义是：两个矢量围成的平行四边形的面积</p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50001</span>;</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"><span class="keyword">int</span> x1,y1,x2,y2,u[N],l[N];</div><div class="line"><span class="keyword">int</span> ans[N];</div><div class="line"><span class="keyword">int</span> x,y;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">xmul</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> (x1*y2)-(x2*y1);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n,n)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u[i]&gt;&gt;l[i];</div><div class="line">            ans[i]=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans[n]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j;i&lt;m;i++)  </div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</div><div class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">                <span class="keyword">if</span>(xmul(x-l[j],y-y2,u[j]-l[j],y1-y2)&lt;=<span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            ans[j]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d: %d\n"</span>,i,ans[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://poj.org/problem?id=2318&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Calculate the number of toys that land in each bin of a partitioned toy box.&lt;br&gt;Mom and dad have a problem - their child John never puts his toys away when he is finished playing with them. They gave John a rectangular box to put his toys in, but John is rebellious and obeys his parents by simply throwing his toys into the box. All the toys get mixed up, and it is impossible for John to find his favorite toys.&lt;/p&gt;
&lt;p&gt;John’s parents came up with the following idea. They put cardboard partitions into the box. Even if John keeps throwing his toys into the box, at least toys that get thrown into different bins stay separated. The following diagram shows a top view of an example toy box.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://poj.org/images/2318_1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://ooobsidian.github.io/tags/ACM/"/>
    
      <category term="数学" scheme="http://ooobsidian.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="POJ" scheme="http://ooobsidian.github.io/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2431 Expedition (优先队列)</title>
    <link href="http://ooobsidian.github.io/2017/08/09/POJ-2431-Expedition-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <id>http://ooobsidian.github.io/2017/08/09/POJ-2431-Expedition-优先队列/</id>
    <published>2017-08-09T07:05:46.000Z</published>
    <updated>2017-08-09T14:49:48.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://vjudge.net/problem/30470/origin" target="_blank" rel="external">题目</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A group of cows grabbed a truck and ventured on an expedition deep into the jungle. Being rather poor drivers, the cows unfortunately managed to run over a rock and puncture the truck’s fuel tank. The truck now leaks one unit of fuel every unit of distance it travels.</p>
<p>To repair the truck, the cows need to drive to the nearest town (no more than $1,000,000$ units distant) down a long, winding road. On this road, between the town and the current location of the truck, there are $N$ $(1 \leq N \leq 10,000)$ fuel stops where the cows can stop to acquire additional fuel ( $1..100$ units at each stop).<br><a id="more"></a><br>The jungle is a dangerous place for humans and is especially dangerous for cows. Therefore, the cows want to make the minimum possible number of stops for fuel on the way to the town. Fortunately, the capacity of the fuel tank on their truck is so large that there is effectively no limit to the amount of fuel it can hold. The truck is currently L units away from the town and has $P$ units of fuel $(1 \leq P \leq 1,000,000)$ .</p>
<p>Determine the minimum number of stops needed to reach the town, or if the cows cannot reach the town at all.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><ul>
<li><p>Line $1$ : A single integer, $N$</p>
</li>
<li><p>Lines $2..N+1$ : Each line contains two space-separated integers describing a fuel stop: The first integer is the distance from the town to the stop; the second is the amount of fuel available at that stop.</p>
</li>
<li><p>Line $N+2$ : Two space-separated integers, $L$ and $P$</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2></li>
<li>Line $1$ : A single integer giving the minimum number of fuel stops necessary to reach the town. If it is not possible to reach the town, output $-1$ .</li>
</ul>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">4</div><div class="line">4 4</div><div class="line">5 2</div><div class="line">11 5</div><div class="line">15 10</div><div class="line">25 10</div></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2</div></pre></td></tr></table></figure>
<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>INPUT DETAILS:</p>
<p>The truck is $25$ units away from the town; the truck has $10$ units of fuel. Along the road, there are $4$ fuel stops at distances $4$ , $5$ , $11$ , and $15$ from the town (so these are initially at distances $21$ , $20$ , $14$ , and $10$ from the truck). These fuel stops can supply up to $4$ , $2$ , $5$ , and $10$ units of fuel, respectively.</p>
<p>OUTPUT DETAILS:</p>
<p>Drive $10$ units, stop to acquire $10$ more units of fuel, drive $4$ more units, stop to acquire $5$ more units of fuel, then drive to the town.</p>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://poj.org/searchproblem?field=source&amp;key=USACO+2005+U+S+Open+Gold" target="_blank" rel="external">USACO 2005 U S Open Gold</a></p>
<hr>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>你需要驾驶一辆卡车行驶 $L$ 单位距离。最开始时，卡车上有 $P$ 单位的汽油。卡车每开 $1$ 单位距离就要消耗 $1$ 单位汽油。如果在途中车上的汽油耗尽，卡车就无法继续前行，因而无法到达终点。在途中一共有 $N$ 个加油站。第 $i$ 个加油站在距离起点 $A_i$单位距离的地方，最多可以给卡车加 $B_i$单位汽油。假设卡车的燃料箱的容量是无限大的，无论加多少油都没有问题。那么问卡车是否能到达终点？如果可以，最少需要加多少次油？如果不能，输出 $-1$ 。</p>
<hr>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>由于加油站数量非常大，所以算法必须高效。这样想，在卡车开往终点的途中，只有在加油站才可以加油，但是，如果<strong>认为有只要经过这个加油站在任何时候都可以加 $B_i$ 单位汽油的权利</strong> ，所以在之后需要加油的时候，就认为是在之前经过的加油站加的油就可以了。那么，当燃料为 $0$ 时应该用哪个加油站加油呢，因为油箱的容量无限大，所以挑选在此时位置之前所经过的加油站油量最大的加油站。</p>
<p>为了高效地进行上述操作，我们可以使用从大到小地顺序依次取出数值地<strong>优先队列</strong>。</p>
<p>上面的分析是《挑战算法竞赛》的一些分析，算法的确巧妙，但是自己想的确有点吃力，所以照着书本的分析，写出了代码，但是由于树上的代码是为了方便只写了关键代码，而且“为了方便起见，将题目输入的加油站到终点的距离改成了起点到加油站的距离” ，这里 $WA$ 了不少次，然后改对之后，是由于题目输入的数据不是按照加油站距离起点远近顺序，因此得需要建立结构体按照加油站与起点的距离排序。</p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1000000</span>;</div><div class="line"><span class="keyword">int</span> l,p,n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">	<span class="keyword">int</span> a,b;</div><div class="line">&#125;s[MAXN];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> node c,<span class="keyword">const</span> node b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">return</span> c.a&lt;b.a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        s[i].a=l-s[i].a;      <span class="comment">//转换为加油站到起点的距离</span></div><div class="line">    &#125;</div><div class="line">    s[n].a=l;</div><div class="line">    s[n].b=<span class="number">0</span>;</div><div class="line">    n++;</div><div class="line">    sort(s,s+n,cmp);</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;  <span class="comment">//加油次数</span></div><div class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;  <span class="comment">//现在所在位置</span></div><div class="line">    <span class="keyword">int</span> tank=p;  <span class="comment">//油箱中的油量</span></div><div class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; que;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> d=s[i].a-pos;   <span class="comment">//当前需要走的距离</span></div><div class="line">        <span class="keyword">while</span>(tank-d&lt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(que.empty())   <span class="comment">//油箱为空</span></div><div class="line">            &#123;</div><div class="line">                <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                tank+=que.top();</div><div class="line">                que.pop();</div><div class="line">                ans++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        tank-=d;</div><div class="line">        pos=s[i].a;</div><div class="line">        que.push(s[i].b);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;s[i].a,&amp;s[i].b);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;p);</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://vjudge.net/problem/30470/origin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;A group of cows grabbed a truck and ventured on an expedition deep into the jungle. Being rather poor drivers, the cows unfortunately managed to run over a rock and puncture the truck’s fuel tank. The truck now leaks one unit of fuel every unit of distance it travels.&lt;/p&gt;
&lt;p&gt;To repair the truck, the cows need to drive to the nearest town (no more than $1,000,000$ units distant) down a long, winding road. On this road, between the town and the current location of the truck, there are $N$ $(1 \leq N \leq 10,000)$ fuel stops where the cows can stop to acquire additional fuel ( $1..100$ units at each stop).&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://ooobsidian.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="http://ooobsidian.github.io/tags/POJ/"/>
    
      <category term="数据结构" scheme="http://ooobsidian.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>HDU 1252 Hike on a Graph (BFS)</title>
    <link href="http://ooobsidian.github.io/2017/08/09/HDU-1252-Hike-on-a-Graph-BFS/"/>
    <id>http://ooobsidian.github.io/2017/08/09/HDU-1252-Hike-on-a-Graph-BFS/</id>
    <published>2017-08-08T16:06:02.000Z</published>
    <updated>2017-08-08T16:08:21.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://vjudge.net/problem/40580/origin" target="_blank" rel="external">题目</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>“Hike on a Graph” is a game that is played on a board on which an undirected graph is drawn. The graph is complete and has all loops, i.e. for any two locations there is exactly one arrow between them. The arrows are coloured. There are three players, and each of them has a piece. At the beginning of the game, the three pieces are in fixed locations on the graph. In turn, the players may do a move. A move consists of moving one’s own piece along an arrow to a new location on the board. The following constraint is imposed on this: the piece may only be moved along arrows of the same colour as the arrow between the two opponents’ pieces.<br><a id="more"></a><br>In the sixties (“make love not war”) a one-person variant of the game emerged. In this variant one person moves all the three pieces, not necessarily one after the other, but of course only one at a time. Goal of this game is to get all pieces onto the same location, using as few moves as possible. Find out the smallest number of moves that is necessary to get all three pieces onto the same location, for a given board layout and starting positions.</p>
<p><img src="http://acm.hdu.edu.cn/data/images/c15-1002-1.gif" alt=""></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input file contains several test cases. Each test case starts with the number $n$ . Input is terminated by $n=0$ . Otherwise, $1 \leq n \leq 50$ . Then follow three integers $p_1$ , $p_2$ , $p_3$ with $1 \leq pi\leq n$ denoting the starting locations of the game pieces. The colours of the arrows are given next as a $m×m$ matrix of whitespace-separated lower-case letters. The element mij denotes the colour of the arrow between the locations $i$ and $j$ . Since the graph is undirected, you can assume the matrix to be symmetrical.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case output on a single line the minimum number of moves required to get all three pieces onto the same location, or the word “impossible” if that is not possible for the given board and starting locations.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">3 1 2 3</div><div class="line">r b r</div><div class="line">b b b</div><div class="line">r b r</div><div class="line">2 1 2 2</div><div class="line">y g</div><div class="line">g y</div><div class="line">0</div></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">impossible</div></pre></td></tr></table></figure>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=University+of+Ulm+Local+Contest+2000&amp;source=1&amp;searchmode=source" target="_blank" rel="external">University of Ulm Local Contest 2000</a></p>
<hr>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给你 $n$ 个点 $(1 \leq n \leq 50)$ 构成的完全无向图（任意两点之间都存在边包括自己到自己的边 ），三个棋子的起始位置，再给出每个点到另一个点的或者到自己的边的颜色，有 $r,g,b$ 三种颜色，分别代表 $red,green,blue$，不是重点。一个棋子从一个点走到另一个点的要求是：<strong>从该点走到另一个点的这条边的颜色只能和另外两个棋子组成的边颜色相同</strong> ，问你三个棋子走到同一个点最少需要多少步。</p>
<hr>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>按照要求进行 $bfs$ .</p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">60</span>;</div><div class="line"><span class="keyword">int</span> n,p1,p2,p3;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> x,y,z;</div><div class="line">    node(<span class="keyword">int</span> _x,<span class="keyword">int</span> _y,<span class="keyword">int</span> _z)</div><div class="line">    &#123;</div><div class="line">        x=_x;</div><div class="line">        y=_y;</div><div class="line">        z=_z;</div><div class="line">    &#125;                    <span class="comment">//构造函数</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">char</span> G[MAXN][MAXN];</div><div class="line"><span class="keyword">int</span> vis[MAXN][MAXN][MAXN];  <span class="comment">//表示三个棋子所在位置步数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    clr(vis,<span class="number">0</span>);  <span class="comment">//未访问过的一种状态置为0</span></div><div class="line">    <span class="built_in">queue</span> &lt;node&gt; q;</div><div class="line">    q.push(node(p1,p2,p3));  <span class="comment">//初始p1,p2,p3的步数为1</span></div><div class="line">    vis[p1][p2][p3]=<span class="number">1</span>;  <span class="comment">//最后答案要减一</span></div><div class="line">    <span class="keyword">while</span>(!q.empty())</div><div class="line">    &#123;</div><div class="line">        node temp=q.front();</div><div class="line">        <span class="keyword">int</span> x=temp.x;</div><div class="line">        <span class="keyword">int</span> y=temp.y;</div><div class="line">        <span class="keyword">int</span> z=temp.z;</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">if</span>(x==y&amp;&amp;y==z)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> vis[x][y][z];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(vis[i][y][z]==<span class="number">0</span>&amp;&amp;G[x][i]==G[y][z]) <span class="comment">//按题意</span></div><div class="line">            &#123;</div><div class="line">                vis[i][y][z]=vis[x][y][z]+<span class="number">1</span>;</div><div class="line">                q.push(node(i,y,z));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(vis[x][i][z]==<span class="number">0</span>&amp;&amp;G[y][i]==G[x][z])</div><div class="line">            &#123;</div><div class="line">                vis[x][i][z]=vis[x][y][z]+<span class="number">1</span>;</div><div class="line">                q.push(node(x,i,z));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(vis[x][y][i]==<span class="number">0</span>&amp;&amp;G[z][i]==G[x][y])</div><div class="line">            &#123;</div><div class="line">                vis[x][y][i]=vis[x][y][z]+<span class="number">1</span>;</div><div class="line">                q.push(node(x,y,i));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n,n)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;p1&gt;&gt;p2&gt;&gt;p3;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">cin</span>&gt;&gt;G[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans=bfs();</div><div class="line">        <span class="keyword">if</span>(ans==<span class="number">-1</span>)</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;ans<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//答案减一</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://vjudge.net/problem/40580/origin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;“Hike on a Graph” is a game that is played on a board on which an undirected graph is drawn. The graph is complete and has all loops, i.e. for any two locations there is exactly one arrow between them. The arrows are coloured. There are three players, and each of them has a piece. At the beginning of the game, the three pieces are in fixed locations on the graph. In turn, the players may do a move. A move consists of moving one’s own piece along an arrow to a new location on the board. The following constraint is imposed on this: the piece may only be moved along arrows of the same colour as the arrow between the two opponents’ pieces.&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://ooobsidian.github.io/tags/ACM/"/>
    
      <category term="BFS" scheme="http://ooobsidian.github.io/tags/BFS/"/>
    
      <category term="HDU" scheme="http://ooobsidian.github.io/tags/HDU/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2349 Arctic Network (Kruskal)</title>
    <link href="http://ooobsidian.github.io/2017/08/08/POJ-2349-Kruskal-Arctic-Network/"/>
    <id>http://ooobsidian.github.io/2017/08/08/POJ-2349-Kruskal-Arctic-Network/</id>
    <published>2017-08-08T07:17:33.000Z</published>
    <updated>2017-08-08T07:27:17.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://vjudge.net/problem/17341/origin" target="_blank" rel="external">题目</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The Department of National Defence (DND) wishes to connect several northern outposts by a wireless network. Two different communication technologies are to be used in establishing the network: every outpost will have a radio transceiver and some outposts will in addition have a satellite channel.<br>Any two outposts with a satellite channel can communicate via the satellite, regardless of their location. Otherwise, two outposts can communicate by radio only if the distance between them does not exceed $D$, which depends of the power of the transceivers. Higher power yields higher $D$ but costs more. Due to purchasing and maintenance considerations, the transceivers at the outposts must be identical; that is, the value of $D$ is the same for every pair of outposts.<br><a id="more"></a><br>Your job is to determine the minimum $D$ required for the transceivers. There must be at least one communication path (direct or indirect) between every pair of outposts.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of input contains $N$, the number of test cases. The first line of each test case contains $1 \leq S \leq 100$, the number of satellite channels, and $S\leq P \leq 500$ , the number of outposts. $P$ lines follow, giving the $(x,y)$ coordinates of each outpost in km (coordinates are integers between $0$ and $10,000$).</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each case, output should consist of a single line giving the minimum D required to connect the network. Output should be specified to $2$ decimal points.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2 4</div><div class="line">0 100</div><div class="line">0 300</div><div class="line">0 600</div><div class="line">150 750</div></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">212.13</div></pre></td></tr></table></figure>
<hr>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>有$P$个站点，每个站点之间都有权重（两点之间的距离），给出$S$个卫星，如果两个站点之间用卫星连接，那么它们之间的权值将变为 $0$ ，给出每个站点的坐标，需要保证：</p>
<p>1、任意两个站点都可以联系（直接或者间接）；</p>
<p>2、使任意两站点的最大通信花费变得最小。</p>
<p>需要输出最大的通信花费。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>最小生成树的问题，利用 $Kruskal$ 算法，它的目的是建立一个最小生成树，但是模板中最后返回的是最小生成树的权值和。它的第一步是给所有边按照从小到大的顺序排列。这一步可以直接调用库函数 $qsort$ 或者 $sort$ 。记每条边为 $(u,v)$。<br>有两种情况：1、 $u$ 和 $v$ 在同一个连通分量中，加入 $(u,v)$ 会形成环，不能选择。<br>2、如果$u$,$v$不在同一个连通分量中,那么加入 $(u,v)$ 一定是最优解。<br>现在需要知道三件事：</p>
<p>1、在一张全联通图的最小生成树中，新增一条权为0的边，新增加的边则取代形成的环中的另外一条边形成新的最小生成树。</p>
<p>2、在一张全连通图中，若在其最小生成树中挑选 $S$ 个节点，在其两两间添加权为 $0$ 的边，则新生成的边必定可以取代生成的环中的 $S−1$ 个边构成新的最小生成树。选择 $S$ 个节点，得到的最小生成树由 $S-1$ 条权为 $0$ 的边构成，接下来将剩下的点加入最小生成树里，只需要添加 $(N-1)-(S-1)=N-S$ 条边。</p>
<p>3、在一张全连通图中，新增的一条边可以和任意一条边构成环。</p>
<p>于是，利用 $Kruskal$ 算法在求最小生成树的时候，如果 $u$ 和 $v$ 不在同一个连通分量里，那就通过 $pair$ 建立坐标将 $ans$ 放入 $vector$ 数组里，因为 $ans$ 在过程中已经是从小到大排好的，最后需要输出的就是 $ans[N-S-2]$ 。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(x,y) make_pair(x,y)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">int</span> fa[<span class="number">250005</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ans;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">    &#123;</div><div class="line">        fa[i]=i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(fa[x]!=x)</div><div class="line">        fa[x]=find(fa[x]);</div><div class="line">    <span class="keyword">return</span> fa[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    x=find(x);</div><div class="line">    y=find(y);</div><div class="line">    <span class="keyword">if</span>(x==y)</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        fa[x]=y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> find(x)==find(y);</div><div class="line">&#125;</div><div class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">double</span>,PII&gt; &gt; G;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_egde</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">double</span> d)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    G.pb(mp(d,mp(u,v)));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    init(n);</div><div class="line">    sort(G.begin(),G.end());</div><div class="line">    <span class="keyword">int</span> m=G.size();</div><div class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">    &#123;</div><div class="line">        pair&lt;<span class="keyword">double</span>,PII&gt; p=G[i];</div><div class="line">        <span class="keyword">int</span> x=p.second.first;</div><div class="line">        <span class="keyword">int</span> y=p.second.second;</div><div class="line">        <span class="keyword">double</span> d=p.first;</div><div class="line">        <span class="keyword">if</span>(!same(x,y))</div><div class="line">        &#123;</div><div class="line">            unite(x,y);</div><div class="line">            num++;</div><div class="line">            ans.pb(d);  <span class="comment">//将边权放入vector中</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(num==n<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">joint</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    x=find(x);</div><div class="line">    y=find(y);</div><div class="line">    <span class="keyword">if</span>(x!=y)</div><div class="line">    &#123;</div><div class="line">        fa[x]=y;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">int</span> s,p;</div><div class="line">    <span class="keyword">while</span>(t--)</div><div class="line">    &#123;</div><div class="line">        pair&lt;<span class="keyword">double</span>,<span class="keyword">double</span>&gt; P[<span class="number">505</span>];</div><div class="line">        G.clear();</div><div class="line">        ans.clear();</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;p;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;P[i].first&gt;&gt;P[i].second;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;p;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">double</span> d=dis(P[i].first,P[i].second,P[j].first,P[j].second);</div><div class="line">                add_egde(i,j,d);</div><div class="line">                add_egde(j,i,d);</div><div class="line">            &#125;</div><div class="line">        Kruskal(p);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,ans[p-s<span class="number">-1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>自己理解好久以及在大佬的帮助下最终还是做出了，太菜了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://vjudge.net/problem/17341/origin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;The Department of National Defence (DND) wishes to connect several northern outposts by a wireless network. Two different communication technologies are to be used in establishing the network: every outpost will have a radio transceiver and some outposts will in addition have a satellite channel.&lt;br&gt;Any two outposts with a satellite channel can communicate via the satellite, regardless of their location. Otherwise, two outposts can communicate by radio only if the distance between them does not exceed $D$, which depends of the power of the transceivers. Higher power yields higher $D$ but costs more. Due to purchasing and maintenance considerations, the transceivers at the outposts must be identical; that is, the value of $D$ is the same for every pair of outposts.&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://ooobsidian.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="http://ooobsidian.github.io/tags/POJ/"/>
    
      <category term="图论" scheme="http://ooobsidian.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2524 Ubiquitous Religions (并查集)</title>
    <link href="http://ooobsidian.github.io/2017/08/08/POJ-2524-Ubiquitous-Religions-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://ooobsidian.github.io/2017/08/08/POJ-2524-Ubiquitous-Religions-并查集/</id>
    <published>2017-08-08T07:15:27.000Z</published>
    <updated>2017-08-09T14:44:49.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://vjudge.net/problem/14593/origin" target="_blank" rel="external">题目</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are so many different religions in the world today that it is difficult to keep track of them all. You are interested in finding out how many different religions students in your university believe in.</p>
<p>You know that there are n students in your university $(0 &lt; n \leq<br>50000)$ . It is infeasible for you to ask every student their religious beliefs. Furthermore, many students are not comfortable expressing their beliefs. One way to avoid these problems is to ask $m$ $(0 \leq m \leq \frac{n(n-1)}{2})$ pairs of students and ask them whether they believe in the same religion (e.g. they may know if they both attend the same church). From this data, you may not know what each person believes in, but you can get an idea of the upper bound of how many different religions can be possibly represented on campus. You may assume that each student subscribes to at most one religion.<br><a id="more"></a></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input consists of a number of cases. Each case starts with a line specifying the integers $n$ and $m$ . The next $m$ lines each consists of two integers $i$ and $j$ , specifying that students $i$ and $j$ believe in the same religion. The students are numbered $1$ to $n$ . The end of input is specified by a line in which $n = m = 0$ .</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, print on a single line the case number (starting with $1$ ) followed by the maximum number of different religions that the students in the university believe in.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">10 9</div><div class="line">1 2</div><div class="line">1 3</div><div class="line">1 4</div><div class="line">1 5</div><div class="line">1 6</div><div class="line">1 7</div><div class="line">1 8</div><div class="line">1 9</div><div class="line">1 10</div><div class="line">10 4</div><div class="line">2 3</div><div class="line">4 5</div><div class="line">4 8</div><div class="line">5 8</div><div class="line">0 0</div></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Case 1: 1</div><div class="line">Case 2: 7</div></pre></td></tr></table></figure>
<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>Huge input, scanf is recommended.</p>
<hr>
<p>#分析<br>并查集模板题，不多说，直接上代码</p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">int</span> religion[<span class="number">1000000</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> a)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(religion[a]!=a)</div><div class="line">        religion[a]=find(religion[a]);</div><div class="line">    <span class="keyword">return</span> religion[a];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> fx,fy;</div><div class="line">    fx=find(a);</div><div class="line">    fy=find(b);</div><div class="line">    <span class="keyword">if</span>(fx!=fy)</div><div class="line">        religion[fx]=fy;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="keyword">int</span> t,n;</div><div class="line">    <span class="keyword">int</span> kase=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t,&amp;n)==<span class="number">2</span>,t+n)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">        clr(religion,<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</div><div class="line">        &#123;</div><div class="line">            religion[i]=i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">            merge(a,b);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(find(i)==i)</div><div class="line">                cnt++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,++kase,cnt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://vjudge.net/problem/14593/origin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;There are so many different religions in the world today that it is difficult to keep track of them all. You are interested in finding out how many different religions students in your university believe in.&lt;/p&gt;
&lt;p&gt;You know that there are n students in your university $(0 &amp;lt; n \leq&lt;br&gt;50000)$ . It is infeasible for you to ask every student their religious beliefs. Furthermore, many students are not comfortable expressing their beliefs. One way to avoid these problems is to ask $m$ $(0 \leq m \leq \frac{n(n-1)}{2})$ pairs of students and ask them whether they believe in the same religion (e.g. they may know if they both attend the same church). From this data, you may not know what each person believes in, but you can get an idea of the upper bound of how many different religions can be possibly represented on campus. You may assume that each student subscribes to at most one religion.&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://ooobsidian.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="http://ooobsidian.github.io/tags/POJ/"/>
    
      <category term="数据结构" scheme="http://ooobsidian.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1125 Stockbroker Grapevine (Floyd)</title>
    <link href="http://ooobsidian.github.io/2017/08/08/POJ-1125-Stockbroker-Grapevine-Floyd/"/>
    <id>http://ooobsidian.github.io/2017/08/08/POJ-1125-Stockbroker-Grapevine-Floyd/</id>
    <published>2017-08-08T07:13:02.000Z</published>
    <updated>2017-08-08T07:14:24.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://vjudge.net/problem/14577/origin" target="_blank" rel="external">题目</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Stockbrokers are known to overreact to rumours. You have been contracted to develop a method of spreading disinformation amongst the stockbrokers to give your employer the tactical edge in the stock market. For maximum effect, you have to spread the rumours in the fastest possible way.</p>
<p>Unfortunately for you, stockbrokers only trust information coming from their “Trusted sources” This means you have to take into account the structure of their contacts when starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the rumour on to each of his colleagues. Your task will be to write a program that tells you which stockbroker to choose as your starting point for the rumour, as well as the time it will take for the rumour to spread throughout the stockbroker community. This duration is measured as the time needed for the last person to receive the information.<br> <a id="more"></a></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Your program will input data for different sets of stockbrokers. Each set starts with a line with the number of stockbrokers. Following this is a line for each stockbroker which contains the number of people who they have contact with, who these people are, and the time taken for them to pass the message to each person. The format of each stockbroker line is as follows: The line starts with the number of contacts $(n)$ , followed by $n$ pairs of integers, one pair for each contact. Each pair lists first a number referring to the contact (e.g. a $’1’$ means person number one in the set), followed by the time in minutes taken to pass a message to that person. There are no special punctuation symbols or spacing rules.</p>
<p>Each person is numbered $1$ through to the number of stockbrokers. The time taken to pass the message on will be between $1$ and $10$ minutes (inclusive), and the number of contacts will range between $0$ and one less than the number of stockbrokers. The number of stockbrokers will range from $1$ to $100$. The input is terminated by a set of stockbrokers containing $0$ (zero) people.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each set of data, your program must output a single line containing the person who results in the fastest message transmission, and how long before the last person will receive any given message after you give it to this person, measured in integer minutes.<br>It is possible that your program will receive a network of connections that excludes some persons, i.e. some people may be unreachable. If your program detects such a broken network, simply output the message “disjoint”. Note that the time taken to pass the message from person $A$ to person $B$ is not necessarily the same as the time taken to pass it from $B$ to $A$ , if such transmission is possible at all.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">2 2 4 3 5</div><div class="line">2 1 2 3 6</div><div class="line">2 1 2 2 2</div><div class="line">5</div><div class="line">3 4 4 2 8 5 3</div><div class="line">1 5 8</div><div class="line">4 1 6 4 10 2 7 5 2</div><div class="line">0</div><div class="line">2 2 5 1 5</div><div class="line">0</div></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">3 2</div><div class="line">3 10</div></pre></td></tr></table></figure>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://poj.org/searchproblem?field=source&amp;key=Southern+African+2001" target="_blank" rel="external">Southern African 2001</a></p>
<hr>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>有几个人，输入他们与其他人通信所需要的时间，要求找到从哪一个人开始打电话直到打到最后一个人的时间最短，并输出最短时间。</p>
<hr>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这是弗洛伊德求最短路算法，他可以算出任意两点之间的路。利用弗洛伊德算法求出从每个人出发到离他最远的那个人的通信时间，然后依次比较最远通信时间找出最小的，并且记录出发者的编号。首先令通信时间是无穷大，如果到最后通信时间还是无穷大，说明这条路没有联通，那就输出”disjoint”。</p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"><span class="keyword">int</span> dp[<span class="number">1000</span>][<span class="number">1000</span>]; <span class="comment">//用dp[i][j]表示从i号人到j号人的通信时间</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=t;k++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=t;j++)</div><div class="line">                dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;t,t)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> person,tim;</div><div class="line">        clr(dp,INF);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> n;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">            dp[i][i]=<span class="number">0</span>;  <span class="comment">//初始化，自己到自己的通信时间为0</span></div><div class="line">            <span class="keyword">while</span>(n--)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">cin</span>&gt;&gt;person&gt;&gt;tim;</div><div class="line">                dp[i][person]=tim;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        floyd();</div><div class="line">        <span class="keyword">int</span> m;</div><div class="line">        <span class="keyword">int</span> ans=INF,ans2;</div><div class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</div><div class="line">        &#123;</div><div class="line">            m=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=t;j++)</div><div class="line">            &#123;</div><div class="line">                m=max(m,dp[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(ans&gt;m)</div><div class="line">            &#123;</div><div class="line">                ans=m;</div><div class="line">                ans2=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ans!=INF)</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;ans2&lt;&lt;<span class="string">" "</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"disjoint"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://vjudge.net/problem/14577/origin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Stockbrokers are known to overreact to rumours. You have been contracted to develop a method of spreading disinformation amongst the stockbrokers to give your employer the tactical edge in the stock market. For maximum effect, you have to spread the rumours in the fastest possible way.&lt;/p&gt;
&lt;p&gt;Unfortunately for you, stockbrokers only trust information coming from their “Trusted sources” This means you have to take into account the structure of their contacts when starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the rumour on to each of his colleagues. Your task will be to write a program that tells you which stockbroker to choose as your starting point for the rumour, as well as the time it will take for the rumour to spread throughout the stockbroker community. This duration is measured as the time needed for the last person to receive the information.&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://ooobsidian.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="http://ooobsidian.github.io/tags/POJ/"/>
    
      <category term="图论" scheme="http://ooobsidian.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1789 Truck History (Prim算法求最小生成树)</title>
    <link href="http://ooobsidian.github.io/2017/08/08/POJ-1789/"/>
    <id>http://ooobsidian.github.io/2017/08/08/POJ-1789/</id>
    <published>2017-08-08T07:10:26.000Z</published>
    <updated>2017-08-08T07:11:51.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://vjudge.net/problem/10534/origin" target="_blank" rel="external">题目</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Advanced Cargo Movement, Ltd. uses trucks of different types. Some trucks are used for vegetable delivery, other for furniture, or for bricks. The company has its own code describing each type of a truck. The code is simply a string of exactly seven lowercase letters (each letter on each position has a very special meaning but that is unimportant for this task). At the beginning of company’s history, just a single truck type was used but later other types were derived from it, then from the new types another types were derived, and so on.<br> <a id="more"></a><br>Today, ACM is rich enough to pay historians to study its history. One thing historians tried to find out is so called derivation plan – i.e. how the truck types were derived. They defined the distance of truck types as the number of positions with different letters in truck type codes. They also assumed that each truck type was derived from exactly one other truck type (except for the first truck type which was not derived from any other type). The quality of a derivation plan was then defined as<br>$$\frac{1}{\sum_{(t_o,t_d)}d(t_o,t_d)}$$</p>
<p>where the sum goes over all pairs of types in the derivation plan such that t o is the original type and t d the type derived from it and $d(t_o,t_d)$ is the distance of the types.<br>Since historians failed, you are to write a program to help them. Given the codes of truck types, your program should find the highest possible quality of a derivation plan.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input consists of several test cases. Each test case begins with a line containing the number of truck types, $N$ , $2 \leq N \leq 2000$. Each of the following $N$ lines of input contains one truck type code (a string of seven lowercase letters). You may assume that the codes uniquely describe the trucks, i.e., no two of these $N$ lines are the same. The input is terminated with zero at the place of number of truck types.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, your program should output the text “The highest possible quality is $\frac{1}{Q}$ .”, where $\frac{1}{Q}$ is the quality of the best derivation plan.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">4</div><div class="line">aaaaaaa</div><div class="line">baaaaaa</div><div class="line">abaaaaa</div><div class="line">aabaaaa</div><div class="line">0</div></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The highest possible quality is 1/3.</div></pre></td></tr></table></figure>
<hr>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>历史上，曾用 $7$ 个小写字母来表示每种truck的型号，每两种型号之间的差距为字母串中不同字母的个数。现在给出 $n$ 种不同型号的truck，问怎样使<br>$\frac{1}{\sum_{(t_o,t_d)}d(t_o,t_d)}$ 的值最小。（即找到一条连接所有truck的最短路径。典型的最小生成树的问题，$Prim$ 算法适合稠密图，$Kruskal$ 算法适合稀疏图，可以使用 $Prim$ 和 $kruskal$ 两种方法。该题是稠密的图。</p>
<hr>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>输入的字符串需要转换成邻接矩阵，然后直接套 $Prim$ 模板就好啦~</p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2010</span>;</div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"><span class="keyword">int</span> lowc[MAXN];</div><div class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAXN][MAXN];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Prim</span><span class="params">(<span class="keyword">int</span> cost[][MAXN],<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    clr(vis,<span class="number">0</span>);</div><div class="line">    vis[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        lowc[i]=cost[<span class="number">0</span>][i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> minc=INF;</div><div class="line">        <span class="keyword">int</span> p=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;minc&gt;lowc[j])</div><div class="line">            &#123;</div><div class="line">                minc=lowc[j];</div><div class="line">                p=j;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">if</span>(minc==INF)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        vis[p]=<span class="number">1</span>;</div><div class="line">        ans+=minc;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;lowc[j]&gt;cost[p][j])</div><div class="line">                lowc[j]=cost[p][j];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="keyword">char</span> str[MAXN][<span class="number">8</span>];</div><div class="line">    <span class="keyword">int</span> edge;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;t,t)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;str[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)  <span class="comment">//接下来就是建立邻接矩阵</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;t;j++)  <span class="comment">//这里wa了好久</span></div><div class="line">            &#123;</div><div class="line">                edge=<span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">7</span>;k++)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(str[i][k]!=str[j][k])</div><div class="line">                        edge++;</div><div class="line">                    <span class="built_in">map</span>[i][j]=<span class="built_in">map</span>[j][i]=edge;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans;</div><div class="line">        ans=Prim(<span class="built_in">map</span>,t);  <span class="comment">//Prim算法</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"The highest possible quality is 1/%d.\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PS：太菜，太菜了哇…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://vjudge.net/problem/10534/origin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Advanced Cargo Movement, Ltd. uses trucks of different types. Some trucks are used for vegetable delivery, other for furniture, or for bricks. The company has its own code describing each type of a truck. The code is simply a string of exactly seven lowercase letters (each letter on each position has a very special meaning but that is unimportant for this task). At the beginning of company’s history, just a single truck type was used but later other types were derived from it, then from the new types another types were derived, and so on.&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://ooobsidian.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="http://ooobsidian.github.io/tags/POJ/"/>
    
      <category term="数据结构" scheme="http://ooobsidian.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>POJ 3259 Wormholes (Bellman-Ford判断负环)</title>
    <link href="http://ooobsidian.github.io/2017/08/07/POJ-3259/"/>
    <id>http://ooobsidian.github.io/2017/08/07/POJ-3259/</id>
    <published>2017-08-07T14:15:19.000Z</published>
    <updated>2017-08-08T09:39:25.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="http://poj.org/problem?id=3259" target="_blank" rel="external">题目</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>While exploring his many farms, Farmer John has discovered a number of amazing wormholes. A wormhole is very peculiar because it is a one-way path that delivers you to its destination at a time that is BEFORE you entered the wormhole! Each of FJ’s farms comprises $ N (1 \leq N \leq 500) $ fields conveniently numbered $1…N$, $M$ $(1 \leq M \leq 2500)$ paths, and $W$ $(1 \leq W \leq 200)$ wormholes.</p>
<p>As FJ is an avid time-traveling fan, he wants to do the following: start at some field, travel through some paths and wormholes, and return to the starting field a time before his initial departure. Perhaps he will be able to meet himself :) .<br><a id="more"></a><br>To help FJ find out whether this is possible or not, he will supply you with complete maps to $F$ $(1 \leq F \leq 5)$ of his farms. No paths will take longer than 10,000 seconds to travel and no wormhole can bring FJ back in time by more than $10,000$ seconds.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Line $1$: A single integer, $F$. $F$ farm descriptions follow.<br>Line $1$ of each farm: Three space-separated integers respectively: $N$ , $M$ , and $W$</p>
<p>Lines $2.. M+1$ of each farm: Three space-separated numbers $( S, E, T)$ that describe, respectively: a bidirectional path between $S$ and $E$ that requires $T$ seconds to traverse. Two fields might be connected by more than one path.</p>
<p>Lines $M+2.. M+ W+1$ of each farm: Three space-separated numbers $( S, E, T)$ that describe, respectively: A one way path from $S$ to $E$ that also moves the traveler back $T$ seconds.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Lines $1.. F$ : For each farm, output “YES” if FJ can achieve his goal, otherwise output “NO” (do not include the quotes).</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">3 3 1</div><div class="line">1 2 2</div><div class="line">1 3 4</div><div class="line">2 3 1</div><div class="line">3 1 3</div><div class="line">3 2 1</div><div class="line">1 2 3</div><div class="line">2 3 4</div><div class="line">3 1 8</div></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NO</div><div class="line">YES</div></pre></td></tr></table></figure>
<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>For farm $1$, FJ cannot travel back in time.</p>
<p>For farm $2$ , FJ could travel back in time by the cycle $1\rightarrow2\rightarrow3\rightarrow1$ , arriving back at his starting location $1$ second before he leaves. He could start from anywhere on the cycle to accomplish this.</p>
<hr>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>有一个人，他喜欢时间旅行，现在有一些虫洞，可以回到过去，现在有 $n$ 个点，$m$ 条边，代表现在可以走的通路，比如从 $a$ 到 $b$ 和从 $b$ 到 $a$ 需要花费 $c$ 时间，现在在地上出现了 $w$ 个虫洞，虫洞的意义就是你从 $a$ 到 $b$ 话费的时间是 $-c$ (时间倒流,并且虫洞是单向的)，现在问你从某个点开始走，能回到从前。现在让你判断他能不能回到从前。</p>
<hr>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>题目的数据给出了每个点的坐标，这样就可以构成一张图，用 $\Bbb {Bellman-Ford}$ 算法判断该图中是否存在负环，如果存在，输出“YES”,否则输出“NO”。题目数据比较水，没有考虑重边的情况。。。可以套模板</p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">10000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_E=<span class="number">10000</span>;</div><div class="line"><span class="keyword">int</span> From[MAX_E],To[MAX_E],W[MAX_E];</div><div class="line"><span class="keyword">int</span> dis[MAX_N],tot;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    tot=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> d)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    From[tot]=u;</div><div class="line">    To[tot]=v;</div><div class="line">    W[tot++]=d;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bellman_ford</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    clr(dis,<span class="number">0x3f</span>);</div><div class="line">    dis[s]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n<span class="number">-1</span>;k++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">bool</span> relaxed=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> x=From[i],y=To[i];</div><div class="line">            <span class="keyword">if</span>(dis[y]&gt;dis[x]+W[i])</div><div class="line">            &#123;</div><div class="line">                dis[y]=dis[x]+W[i];</div><div class="line">                relaxed=<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!relaxed)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;i++)</div><div class="line">        <span class="keyword">if</span>(dis[To[i]]&gt;dis[From[i]]+W[i])</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> f,n,m,t,u,v,w;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;f;</div><div class="line">    <span class="keyword">while</span>(f--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">        init();</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;t;</div><div class="line"><span class="comment">//*************************************建图</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</div><div class="line">            add_edge(u,v,w);</div><div class="line">            add_edge(v,u,w);</div><div class="line">            num+=<span class="number">2</span>; <span class="comment">//记录边的个数</span></div><div class="line">        &#125;                       </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</div><div class="line">            add_edge(u,v,-w);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//*************************************建图</span></div><div class="line">        <span class="keyword">bool</span> ans=Bellman_ford(<span class="number">1</span>,num);</div><div class="line">        <span class="keyword">if</span>(ans)</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://poj.org/problem?id=3259&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;While exploring his many farms, Farmer John has discovered a number of amazing wormholes. A wormhole is very peculiar because it is a one-way path that delivers you to its destination at a time that is BEFORE you entered the wormhole! Each of FJ’s farms comprises $ N (1 \leq N \leq 500) $ fields conveniently numbered $1…N$, $M$ $(1 \leq M \leq 2500)$ paths, and $W$ $(1 \leq W \leq 200)$ wormholes.&lt;/p&gt;
&lt;p&gt;As FJ is an avid time-traveling fan, he wants to do the following: start at some field, travel through some paths and wormholes, and return to the starting field a time before his initial departure. Perhaps he will be able to meet himself :) .&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://ooobsidian.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="http://ooobsidian.github.io/tags/POJ/"/>
    
      <category term="图论" scheme="http://ooobsidian.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1704 Georgia and Bob (Nim博弈)</title>
    <link href="http://ooobsidian.github.io/2017/08/06/POJ%201704/"/>
    <id>http://ooobsidian.github.io/2017/08/06/POJ 1704/</id>
    <published>2017-08-06T04:58:18.000Z</published>
    <updated>2017-08-08T07:08:06.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="http://poj.org/problem?id=1704" target="_blank" rel="external">题目</a></h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Georgia and Bob decide to play a self-invented game. They draw a row of grids on paper, number the grids from left to right by $1$ , $2$ , $3$ , …, and place $N$ chessmen on different grids, as shown in the following figure for example:</p>
<p> <img src="https://odzkskevi.qnssl.com/c76b52797bb489f0387716c46010da41?v=1501669288" alt=""></p>
<p> Georgia and Bob move the chessmen in turn. Every time a player will choose a chessman, and move it to the left without going over any other chessmen or across the left edge. The player can freely choose number of steps the chessman moves, with the constraint that the chessman must be moved at least ONE step and one grid can at most contains ONE single chessman. The player who cannot make a move loses the game.<br> <a id="more"></a></p>
<p>Georgia always plays first since “Lady first”. Suppose that Georgia and Bob both do their best in the game, i.e., if one of them knows a way to win the game, he or she will be able to carry it out.</p>
<p>Given the initial positions of the $n$ chessmen, can you predict who will finally win the game?</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input contains a single integer $T$ $(1 \leq T \leq 20)$ , the number of test cases. Then $T$ cases follow. Each test case contains two lines. The first line consists of one integer $N$ $(1 \leq N \leq 1000)$ , indicating the number of chessmen. The second line contains $N$ different integers $P_1$ , $P_2$ … $P_n$ $(1 \leq P_i \leq 10000)$ , which are the initial positions of the $n$ chessmen.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, prints a single line, “Georgia will win”, if Georgia will win the game; “Bob will win”, if Bob will win the game; otherwise ‘Not sure’.</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">3</div><div class="line">1 2 3</div><div class="line">8</div><div class="line">1 5 6 7 9 12 14 17</div></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Bob will win</div><div class="line">Georgia will win</div></pre></td></tr></table></figure>
<hr>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>Georgia和Bob在玩游戏，排成直线的格子上放有 $n$ 个棋子。棋子 $i$ 在从左向右的第 $p_i$ 个格子上。两人轮流选择一个棋子向左移动，每次可以移动任意一格，但是不能超过其他的棋子，也不允许两个棋子放在一个格子里。假设二人足够聪明，当一方无法再进行移动棋子时，该方失败，Georgia先进行移动，问在每种条件下谁会获胜？</p>
<hr>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>棋子分为奇数和偶数两种情况.</p>
<p>当棋子个数为偶数时，我们就可以把棋子两辆看成一对，每对棋子就可以转化成 $Nim$ 游戏里的一堆石子,每堆石子的个数就可以用棋子之间的间隔来表示。</p>
<p>右边的棋子向左移动就相当于从一堆石子里取出石子，但是左边的棋子向左移动两个棋子之间的间隔变大，就和 $Nim$ 不相同了。但是，<strong>如果出现增加棋子间隔（增加石子）的情况：对手石子数增加，就让自己将所加部减回去就回到了之前的状态；反之，自己的石子数增加，那就让对手将所加的减回去就回到了之前的状态</strong>。</p>
<p>因此，这个游戏和 $Nim$ 游戏的胜负是一样的。</p>
<p>当棋子的个数为奇数时，将最左边的棋子与格子的最左边的间隔看作是一堆石子，同样也可以转化成 $Nim$ 。</p>
<p>$Nim$ 游戏的胜负只要判断在轮到每个人进行操作时，每次都用异或运算，就可以判断游戏的胜负。如：</p>
<p>$a_1$ XOR $a_2$ XOR $···$ XOR $a_n$ $\neq$ $0$ $\Rightarrow$ 必胜态</p>
<p>$a_1$ XOR $a_2$ XOR $···$ XOR $a_n$ $=$ $0$ $\Rightarrow$ 必败态</p>
<p>至于题目里说的Not sure的情况，应该是不存在这种情况的。</p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,x) memset(a,x,sizeof(a))</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"><span class="keyword">int</span> t,n,a[<span class="number">10010</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>)    <span class="comment">//判断棋子的个数是否为偶数</span></div><div class="line">        a[n++]=<span class="number">0</span>;    <span class="comment">//是奇数，则新令一个棋子放在第一个位置上</span></div><div class="line">    sort(a,a+n);</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i+=<span class="number">2</span>)  <span class="comment">//每两个棋子的选</span></div><div class="line">    &#123;</div><div class="line">        x^=(a[i+<span class="number">1</span>]-a[i]<span class="number">-1</span>);  <span class="comment">//每一堆石子的个数就是两个棋子的间隔</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(x)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Georgia will win"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Bob will win"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">while</span>(t--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</div><div class="line">        &#125;</div><div class="line">        solve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://poj.org/problem?id=1704&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Georgia and Bob decide to play a self-invented game. They draw a row of grids on paper, number the grids from left to right by $1$ , $2$ , $3$ , …, and place $N$ chessmen on different grids, as shown in the following figure for example:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://odzkskevi.qnssl.com/c76b52797bb489f0387716c46010da41?v=1501669288&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; Georgia and Bob move the chessmen in turn. Every time a player will choose a chessman, and move it to the left without going over any other chessmen or across the left edge. The player can freely choose number of steps the chessman moves, with the constraint that the chessman must be moved at least ONE step and one grid can at most contains ONE single chessman. The player who cannot make a move loses the game.&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://ooobsidian.github.io/tags/ACM/"/>
    
      <category term="POJ" scheme="http://ooobsidian.github.io/tags/POJ/"/>
    
      <category term="博弈" scheme="http://ooobsidian.github.io/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
</feed>
