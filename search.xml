<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[POJ 2349 Arctic Network (Kruskal)]]></title>
    <url>%2F2017%2F08%2F08%2FPOJ-2349-Kruskal-Arctic-Network%2F</url>
    <content type="text"><![CDATA[题目DescriptionThe Department of National Defence (DND) wishes to connect several northern outposts by a wireless network. Two different communication technologies are to be used in establishing the network: every outpost will have a radio transceiver and some outposts will in addition have a satellite channel.Any two outposts with a satellite channel can communicate via the satellite, regardless of their location. Otherwise, two outposts can communicate by radio only if the distance between them does not exceed $D$, which depends of the power of the transceivers. Higher power yields higher $D$ but costs more. Due to purchasing and maintenance considerations, the transceivers at the outposts must be identical; that is, the value of $D$ is the same for every pair of outposts.Your job is to determine the minimum $D$ required for the transceivers. There must be at least one communication path (direct or indirect) between every pair of outposts. InputThe first line of input contains $N$, the number of test cases. The first line of each test case contains $1 \leq S \leq 100$, the number of satellite channels, and $S\leq P \leq 500$ , the number of outposts. $P$ lines follow, giving the $(x,y)$ coordinates of each outpost in km (coordinates are integers between $0$ and $10,000$). OutputFor each case, output should consist of a single line giving the minimum D required to connect the network. Output should be specified to $2$ decimal points. Sample Input12345612 40 1000 3000 600150 750 Sample Output1212.13 题意有$P$个站点，每个站点之间都有权重（两点之间的距离），给出$S$个卫星，如果两个站点之间用卫星连接，那么它们之间的权值将变为 $0$ ，给出每个站点的坐标，需要保证： 1、任意两个站点都可以联系（直接或者间接）； 2、使任意两站点的最大通信花费变得最小。 需要输出最大的通信花费。 思路最小生成树的问题，利用 $Kruskal$ 算法，它的目的是建立一个最小生成树，但是模板中最后返回的是最小生成树的权值和。它的第一步是给所有边按照从小到大的顺序排列。这一步可以直接调用库函数 $qsort$ 或者 $sort$ 。记每条边为 $(u,v)$。有两种情况：1、 $u$ 和 $v$ 在同一个连通分量中，加入 $(u,v)$ 会形成环，不能选择。2、如果$u$,$v$不在同一个连通分量中,那么加入 $(u,v)$ 一定是最优解。现在需要知道三件事： 1、在一张全联通图的最小生成树中，新增一条权为0的边，新增加的边则取代形成的环中的另外一条边形成新的最小生成树。 2、在一张全连通图中，若在其最小生成树中挑选 $S$ 个节点，在其两两间添加权为 $0$ 的边，则新生成的边必定可以取代生成的环中的 $S−1$ 个边构成新的最小生成树。选择 $S$ 个节点，得到的最小生成树由 $S-1$ 条权为 $0$ 的边构成，接下来将剩下的点加入最小生成树里，只需要添加 $(N-1)-(S-1)=N-S$ 条边。 3、在一张全连通图中，新增的一条边可以和任意一条边构成环。 于是，利用 $Kruskal$ 算法在求最小生成树的时候，如果 $u$ 和 $v$ 不在同一个连通分量里，那就通过 $pair$ 建立坐标将 $ans$ 放入 $vector$ 数组里，因为 $ans$ 在过程中已经是从小到大排好的，最后需要输出的就是 $ans[N-S-2]$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;cstdlib&gt;#include&lt;functional&gt;#include&lt;climits&gt;#include&lt;cctype&gt;#include&lt;iomanip&gt;using namespace std;typedef long long ll;typedef pair&lt;int,int&gt; PII;#define INF 0x3f3f3f3f#define mod 1e9+7#define clr(a,x) memset(a,x,sizeof(a))#define mp(x,y) make_pair(x,y)#define pb(x) push_back(x)const double eps = 1e-6;int fa[250005];vector&lt;double&gt; ans;void init(int n)&#123; for(int i=0;i&lt;=n;i++) &#123; fa[i]=i; &#125;&#125;int find(int x)&#123; if(fa[x]!=x) fa[x]=find(fa[x]); return fa[x];&#125;void unite(int x,int y)&#123; x=find(x); y=find(y); if(x==y) return ; else fa[x]=y;&#125;bool same(int x,int y)&#123; return find(x)==find(y);&#125;vector &lt;pair&lt;double,PII&gt; &gt; G;void add_egde(int u,int v,double d)&#123; G.pb(mp(d,mp(u,v)));&#125;void Kruskal(int n)&#123; init(n); sort(G.begin(),G.end()); int m=G.size(); int num=0; for(int i=0;i&lt;m;i++) &#123; pair&lt;double,PII&gt; p=G[i]; int x=p.second.first; int y=p.second.second; double d=p.first; if(!same(x,y)) &#123; unite(x,y); num++; ans.pb(d); //将边权放入vector中 &#125; if(num==n-1) break; &#125;&#125;double dis(double x1,double y1,double x2,double y2)&#123; return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));&#125;void joint(int x,int y)&#123; x=find(x); y=find(y); if(x!=y) &#123; fa[x]=y; &#125;&#125;int main()&#123; int t; cin&gt;&gt;t; int s,p; while(t--) &#123; pair&lt;double,double&gt; P[505]; G.clear(); ans.clear(); cin&gt;&gt;s&gt;&gt;p; for(int i=0;i&lt;p;i++) &#123; cin&gt;&gt;P[i].first&gt;&gt;P[i].second; &#125; for(int i=0;i&lt;p;i++) for(int j=i+1;j&lt;p;j++) &#123; double d=dis(P[i].first,P[i].second,P[j].first,P[j].second); add_egde(i,j,d); add_egde(j,i,d); &#125; Kruskal(p); printf("%.2f\n",ans[p-s-1]); &#125; return 0;&#125; 总结自己理解好久以及在大佬的帮助下最终还是做出了，太菜了。。。]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>POJ</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ 2524 Ubiquitous Religions (并查集)]]></title>
    <url>%2F2017%2F08%2F08%2FPOJ-2524-Ubiquitous-Religions-%E5%B9%B6%E6%9F%A5%E9%9B%86%2F</url>
    <content type="text"><![CDATA[题目DescriptionThere are so many different religions in the world today that it is difficult to keep track of them all. You are interested in finding out how many different religions students in your university believe in. You know that there are n students in your university $(0 &lt; n \leq50000)$ . It is infeasible for you to ask every student their religious beliefs. Furthermore, many students are not comfortable expressing their beliefs. One way to avoid these problems is to ask $m$ $(0 \leq m \leq \frac{n(n-1)}{2})$ pairs of students and ask them whether they believe in the same religion (e.g. they may know if they both attend the same church). From this data, you may not know what each person believes in, but you can get an idea of the upper bound of how many different religions can be possibly represented on campus. You may assume that each student subscribes to at most one religion. InputThe input consists of a number of cases. Each case starts with a line specifying the integers $n$ and $m$ . The next $m$ lines each consists of two integers $i$ and $j$ , specifying that students $i$ and $j$ believe in the same religion. The students are numbered $1$ to $n$ . The end of input is specified by a line in which $n = m = 0$ . OutputFor each test case, print on a single line the case number (starting with $1$ ) followed by the maximum number of different religions that the students in the university believe in. Sample Input1234567891011121314151610 91 21 31 41 51 61 71 81 91 1010 42 34 54 85 80 0 Sample Output12Case 1: 1Case 2: 7 HintHuge input, scanf is recommended. #分析并查集模板题，不多说，直接上代码 #代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;cstdlib&gt;#include&lt;functional&gt;#include&lt;climits&gt;#include&lt;cctype&gt;#include&lt;iomanip&gt;using namespace std;typedef long long ll;#define INF 0x3f3f3f3f#define mod 1e9+7#define clr(a,x) memset(a,x,sizeof(a))const double eps = 1e-6;int religion[1000000];int find(int a)&#123; if(religion[a]!=a) religion[a]=find(religion[a]); return religion[a];&#125;void merge(int a,int b)&#123; int fx,fy; fx=find(a); fy=find(b); if(fx!=fy) religion[fx]=fy;&#125;int main()&#123; int a,b; int t,n; int kase=0; while(scanf("%d%d",&amp;t,&amp;n)==2,t+n) &#123; int cnt=0; clr(religion,0); for(int i=1;i&lt;=t;i++) &#123; religion[i]=i; &#125; for(int i=0;i&lt;n;i++) &#123; scanf("%d%d",&amp;a,&amp;b); merge(a,b); &#125; for(int i=1;i&lt;=t;i++) &#123; if(find(i)==i) cnt++; &#125; printf("Case %d: %d\n",++kase,cnt); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>POJ</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ 1125 Stockbroker Grapevine (Floyd)]]></title>
    <url>%2F2017%2F08%2F08%2FPOJ-1125-Stockbroker-Grapevine-Floyd%2F</url>
    <content type="text"><![CDATA[题目DescriptionStockbrokers are known to overreact to rumours. You have been contracted to develop a method of spreading disinformation amongst the stockbrokers to give your employer the tactical edge in the stock market. For maximum effect, you have to spread the rumours in the fastest possible way. Unfortunately for you, stockbrokers only trust information coming from their “Trusted sources” This means you have to take into account the structure of their contacts when starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the rumour on to each of his colleagues. Your task will be to write a program that tells you which stockbroker to choose as your starting point for the rumour, as well as the time it will take for the rumour to spread throughout the stockbroker community. This duration is measured as the time needed for the last person to receive the information. InputYour program will input data for different sets of stockbrokers. Each set starts with a line with the number of stockbrokers. Following this is a line for each stockbroker which contains the number of people who they have contact with, who these people are, and the time taken for them to pass the message to each person. The format of each stockbroker line is as follows: The line starts with the number of contacts $(n)$ , followed by $n$ pairs of integers, one pair for each contact. Each pair lists first a number referring to the contact (e.g. a $’1’$ means person number one in the set), followed by the time in minutes taken to pass a message to that person. There are no special punctuation symbols or spacing rules. Each person is numbered $1$ through to the number of stockbrokers. The time taken to pass the message on will be between $1$ and $10$ minutes (inclusive), and the number of contacts will range between $0$ and one less than the number of stockbrokers. The number of stockbrokers will range from $1$ to $100$. The input is terminated by a set of stockbrokers containing $0$ (zero) people. OutputFor each set of data, your program must output a single line containing the person who results in the fastest message transmission, and how long before the last person will receive any given message after you give it to this person, measured in integer minutes.It is possible that your program will receive a network of connections that excludes some persons, i.e. some people may be unreachable. If your program detects such a broken network, simply output the message “disjoint”. Note that the time taken to pass the message from person $A$ to person $B$ is not necessarily the same as the time taken to pass it from $B$ to $A$ , if such transmission is possible at all. Sample Input123456789101132 2 4 3 52 1 2 3 62 1 2 2 253 4 4 2 8 5 31 5 84 1 6 4 10 2 7 5 202 2 5 1 50 Sample Output123 23 10 SourceSouthern African 2001 题意有几个人，输入他们与其他人通信所需要的时间，要求找到从哪一个人开始打电话直到打到最后一个人的时间最短，并输出最短时间。 分析这是弗洛伊德求最短路算法，他可以算出任意两点之间的路。利用弗洛伊德算法求出从每个人出发到离他最远的那个人的通信时间，然后依次比较最远通信时间找出最小的，并且记录出发者的编号。首先令通信时间是无穷大，如果到最后通信时间还是无穷大，说明这条路没有联通，那就输出”disjoint”。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;cstdlib&gt;#include&lt;functional&gt;#include&lt;climits&gt;#include&lt;cctype&gt;#include&lt;iomanip&gt;using namespace std;typedef long long ll;#define INF 0x3f3f3f3f#define mod 1e9+7#define clr(a,x) memset(a,x,sizeof(a))const double eps = 1e-6;int t;int dp[1000][1000]; //用dp[i][j]表示从i号人到j号人的通信时间void floyd()&#123; for(int k=1;k&lt;=t;k++) for(int i=1;i&lt;=t;i++) for(int j=1;j&lt;=t;j++) dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]);&#125;int main()&#123; while(cin&gt;&gt;t,t) &#123; int person,tim; clr(dp,INF); for(int i=1;i&lt;=t;i++) &#123; int n; cin&gt;&gt;n; dp[i][i]=0; //初始化，自己到自己的通信时间为0 while(n--) &#123; cin&gt;&gt;person&gt;&gt;tim; dp[i][person]=tim; &#125; &#125; floyd(); int m; int ans=INF,ans2; int flag=0; for(int i=1;i&lt;=t;i++) &#123; m=0; for(int j=1;j&lt;=t;j++) &#123; m=max(m,dp[i][j]); &#125; if(ans&gt;m) &#123; ans=m; ans2=i; &#125; &#125; if(ans!=INF) cout&lt;&lt;ans2&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl; else cout&lt;&lt;"disjoint"&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>POJ</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ 1789 Truck History (Prim算法求最小生成树)]]></title>
    <url>%2F2017%2F08%2F08%2FPOJ-1789%2F</url>
    <content type="text"><![CDATA[题目DescriptionAdvanced Cargo Movement, Ltd. uses trucks of different types. Some trucks are used for vegetable delivery, other for furniture, or for bricks. The company has its own code describing each type of a truck. The code is simply a string of exactly seven lowercase letters (each letter on each position has a very special meaning but that is unimportant for this task). At the beginning of company’s history, just a single truck type was used but later other types were derived from it, then from the new types another types were derived, and so on. Today, ACM is rich enough to pay historians to study its history. One thing historians tried to find out is so called derivation plan – i.e. how the truck types were derived. They defined the distance of truck types as the number of positions with different letters in truck type codes. They also assumed that each truck type was derived from exactly one other truck type (except for the first truck type which was not derived from any other type). The quality of a derivation plan was then defined as$$\frac{1}{\sum_{(t_o,t_d)}d(t_o,t_d)}$$ where the sum goes over all pairs of types in the derivation plan such that t o is the original type and t d the type derived from it and $d(t_o,t_d)$ is the distance of the types.Since historians failed, you are to write a program to help them. Given the codes of truck types, your program should find the highest possible quality of a derivation plan. InputThe input consists of several test cases. Each test case begins with a line containing the number of truck types, $N$ , $2 \leq N \leq 2000$. Each of the following $N$ lines of input contains one truck type code (a string of seven lowercase letters). You may assume that the codes uniquely describe the trucks, i.e., no two of these $N$ lines are the same. The input is terminated with zero at the place of number of truck types. OutputFor each test case, your program should output the text “The highest possible quality is $\frac{1}{Q}$ .”, where $\frac{1}{Q}$ is the quality of the best derivation plan. Sample Input1234564aaaaaaabaaaaaaabaaaaaaabaaaa0 Sample Output1The highest possible quality is 1/3. 题意历史上，曾用 $7$ 个小写字母来表示每种truck的型号，每两种型号之间的差距为字母串中不同字母的个数。现在给出 $n$ 种不同型号的truck，问怎样使$\frac{1}{\sum_{(t_o,t_d)}d(t_o,t_d)}$ 的值最小。（即找到一条连接所有truck的最短路径。典型的最小生成树的问题，$Prim$ 算法适合稠密图，$Kruskal$ 算法适合稀疏图，可以使用 $Prim$ 和 $kruskal$ 两种方法。该题是稠密的图。 分析输入的字符串需要转换成邻接矩阵，然后直接套 $Prim$ 模板就好啦~ 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;set&gt;#include&lt;cstdlib&gt;#include&lt;functional&gt;#include&lt;climits&gt;#include&lt;cctype&gt;#include&lt;iomanip&gt;using namespace std;typedef long long ll;#define INF 0x3f3f3f3f#define mod 1e9+7#define clr(a,x) memset(a,x,sizeof(a))const double eps = 1e-6;const int MAXN=2010;bool vis[MAXN];int lowc[MAXN];int map[MAXN][MAXN];int Prim(int cost[][MAXN],int n)&#123; int ans=0; clr(vis,0); vis[0]=1; for(int i=1;i&lt;n;i++) &#123; lowc[i]=cost[0][i]; &#125; for(int i=1;i&lt;n;i++) &#123; int minc=INF; int p=-1; for(int j=0;j&lt;n;j++) if(!vis[j]&amp;&amp;minc&gt;lowc[j]) &#123; minc=lowc[j]; p=j; &#125; if(minc==INF) &#123; return -1; &#125; vis[p]=1; ans+=minc; for(int j=0;j&lt;n;j++) if(!vis[j]&amp;&amp;lowc[j]&gt;cost[p][j]) lowc[j]=cost[p][j]; &#125; return ans;&#125;int main()&#123; int t; char str[MAXN][8]; int edge; while(cin&gt;&gt;t,t) &#123; for(int i=0;i&lt;t;i++) &#123; scanf("%s",&amp;str[i]); &#125; for(int i=0;i&lt;t;i++) //接下来就是建立邻接矩阵 &#123; for(int j=0;j&lt;t;j++) //这里wa了好久 &#123; edge=0; for(int k=0;k&lt;7;k++) &#123; if(str[i][k]!=str[j][k]) edge++; map[i][j]=map[j][i]=edge; &#125; &#125; &#125; int ans; ans=Prim(map,t); //Prim算法 printf("The highest possible quality is 1/%d.\n",ans); &#125; return 0;&#125; PS：太菜，太菜了哇…]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>POJ</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ 3259 Wormholes (Bellman-Ford判断负环)]]></title>
    <url>%2F2017%2F08%2F07%2FPOJ-3259%2F</url>
    <content type="text"><![CDATA[题目DescriptionWhile exploring his many farms, Farmer John has discovered a number of amazing wormholes. A wormhole is very peculiar because it is a one-way path that delivers you to its destination at a time that is BEFORE you entered the wormhole! Each of FJ’s farms comprises $ N (1 \leq N \leq 500) $ fields conveniently numbered $1…N$, $M$ $(1 \leq M \leq 2500)$ paths, and $W$ $(1 \leq W \leq 200)$ wormholes. As FJ is an avid time-traveling fan, he wants to do the following: start at some field, travel through some paths and wormholes, and return to the starting field a time before his initial departure. Perhaps he will be able to meet himself :) .To help FJ find out whether this is possible or not, he will supply you with complete maps to $F$ $(1 \leq F \leq 5)$ of his farms. No paths will take longer than 10,000 seconds to travel and no wormhole can bring FJ back in time by more than $10,000$ seconds. InputLine $1$: A single integer, $F$. $F$ farm descriptions follow.Line $1$ of each farm: Three space-separated integers respectively: $N$ , $M$ , and $W$ Lines $2.. M+1$ of each farm: Three space-separated numbers $( S, E, T)$ that describe, respectively: a bidirectional path between $S$ and $E$ that requires $T$ seconds to traverse. Two fields might be connected by more than one path. Lines $M+2.. M+ W+1$ of each farm: Three space-separated numbers $( S, E, T)$ that describe, respectively: A one way path from $S$ to $E$ that also moves the traveler back $T$ seconds. OutputLines $1.. F$ : For each farm, output “YES” if FJ can achieve his goal, otherwise output “NO” (do not include the quotes). Sample Input1234567891023 3 11 2 21 3 42 3 13 1 33 2 11 2 32 3 43 1 8 Sample Output12NOYES HintFor farm $1$, FJ cannot travel back in time. For farm $2$ , FJ could travel back in time by the cycle $1\rightarrow2\rightarrow3\rightarrow1$ , arriving back at his starting location $1$ second before he leaves. He could start from anywhere on the cycle to accomplish this. 题意有一个人，他喜欢时间旅行，现在有一些虫洞，可以回到过去，现在有 $n$ 个点，$m$ 条边，代表现在可以走的通路，比如从 $a$ 到 $b$ 和从 $b$ 到 $a$ 需要花费 $c$ 时间，现在在地上出现了 $w$ 个虫洞，虫洞的意义就是你从 $a$ 到 $b$ 话费的时间是 $-c$ (时间倒流,并且虫洞是单向的)，现在问你从某个点开始走，能回到从前。现在让你判断他能不能回到从前。 思路题目的数据给出了每个点的坐标，这样就可以构成一张图，用 $\Bbb {Bellman-Ford}$ 算法判断该图中是否存在负环，如果存在，输出“YES”,否则输出“NO”。题目数据比较水，没有考虑重边的情况。。。可以套模板 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;cstdlib&gt;#include&lt;functional&gt;#include&lt;climits&gt;#include&lt;cctype&gt;#include&lt;iomanip&gt;using namespace std;typedef long long ll;#define INF 0x3f3f3f3f#define mod 1e9+7#define clr(a,x) memset(a,x,sizeof(a))const double eps = 1e-6;const int MAX_N=10000;const int MAX_E=10000;int From[MAX_E],To[MAX_E],W[MAX_E];int dis[MAX_N],tot;void init()&#123; tot=0;&#125;void add_edge(int u,int v,int d)&#123; From[tot]=u; To[tot]=v; W[tot++]=d;&#125;bool Bellman_ford(int s,int n)&#123; clr(dis,0x3f); dis[s]=0; for(int k=0;k&lt;n-1;k++) &#123; bool relaxed=0; for(int i=0;i&lt;tot;i++) &#123; int x=From[i],y=To[i]; if(dis[y]&gt;dis[x]+W[i]) &#123; dis[y]=dis[x]+W[i]; relaxed=1; &#125; &#125; if(!relaxed) break; &#125; for(int i=0;i&lt;tot;i++) if(dis[To[i]]&gt;dis[From[i]]+W[i]) return 1; return 0;&#125;int main()&#123; int f,n,m,t,u,v,w; cin&gt;&gt;f; while(f--) &#123; int num=0; init(); cin&gt;&gt;n&gt;&gt;m&gt;&gt;t;//*************************************建图 for(int i=0;i&lt;m;i++) &#123; cin&gt;&gt;u&gt;&gt;v&gt;&gt;w; add_edge(u,v,w); add_edge(v,u,w); num+=2; //记录边的个数 &#125; for(int i=0;i&lt;t;i++) &#123; cin&gt;&gt;u&gt;&gt;v&gt;&gt;w; add_edge(u,v,-w); &#125;//*************************************建图 bool ans=Bellman_ford(1,num); if(ans) cout&lt;&lt;"YES"&lt;&lt;endl; else cout&lt;&lt;"NO"&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>POJ</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ 1704 Georgia and Bob (Nim博弈)]]></title>
    <url>%2F2017%2F08%2F06%2FPOJ%201704%2F</url>
    <content type="text"><![CDATA[题目DescriptionGeorgia and Bob decide to play a self-invented game. They draw a row of grids on paper, number the grids from left to right by $1$ , $2$ , $3$ , …, and place $N$ chessmen on different grids, as shown in the following figure for example: Georgia and Bob move the chessmen in turn. Every time a player will choose a chessman, and move it to the left without going over any other chessmen or across the left edge. The player can freely choose number of steps the chessman moves, with the constraint that the chessman must be moved at least ONE step and one grid can at most contains ONE single chessman. The player who cannot make a move loses the game. Georgia always plays first since “Lady first”. Suppose that Georgia and Bob both do their best in the game, i.e., if one of them knows a way to win the game, he or she will be able to carry it out. Given the initial positions of the $n$ chessmen, can you predict who will finally win the game? InputThe first line of the input contains a single integer $T$ $(1 \leq T \leq 20)$ , the number of test cases. Then $T$ cases follow. Each test case contains two lines. The first line consists of one integer $N$ $(1 \leq N \leq 1000)$ , indicating the number of chessmen. The second line contains $N$ different integers $P_1$ , $P_2$ … $P_n$ $(1 \leq P_i \leq 10000)$ , which are the initial positions of the $n$ chessmen. OutputFor each test case, prints a single line, “Georgia will win”, if Georgia will win the game; “Bob will win”, if Bob will win the game; otherwise ‘Not sure’. Sample Input12345231 2 381 5 6 7 9 12 14 17 Sample Output12Bob will winGeorgia will win 题意Georgia和Bob在玩游戏，排成直线的格子上放有 $n$ 个棋子。棋子 $i$ 在从左向右的第 $p_i$ 个格子上。两人轮流选择一个棋子向左移动，每次可以移动任意一格，但是不能超过其他的棋子，也不允许两个棋子放在一个格子里。假设二人足够聪明，当一方无法再进行移动棋子时，该方失败，Georgia先进行移动，问在每种条件下谁会获胜？ 思路棋子分为奇数和偶数两种情况. 当棋子个数为偶数时，我们就可以把棋子两辆看成一对，每对棋子就可以转化成 $Nim$ 游戏里的一堆石子,每堆石子的个数就可以用棋子之间的间隔来表示。 右边的棋子向左移动就相当于从一堆石子里取出石子，但是左边的棋子向左移动两个棋子之间的间隔变大，就和 $Nim$ 不相同了。但是，如果出现增加棋子间隔（增加石子）的情况：对手石子数增加，就让自己将所加部减回去就回到了之前的状态；反之，自己的石子数增加，那就让对手将所加的减回去就回到了之前的状态。 因此，这个游戏和 $Nim$ 游戏的胜负是一样的。 当棋子的个数为奇数时，将最左边的棋子与格子的最左边的间隔看作是一堆石子，同样也可以转化成 $Nim$ 。 $Nim$ 游戏的胜负只要判断在轮到每个人进行操作时，每次都用异或运算，就可以判断游戏的胜负。如： $a_1$ XOR $a_2$ XOR $···$ XOR $a_n$ $\neq$ $0$ $\Rightarrow$ 必胜态 $a_1$ XOR $a_2$ XOR $···$ XOR $a_n$ $=$ $0$ $\Rightarrow$ 必败态 至于题目里说的Not sure的情况，应该是不存在这种情况的。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;cstdlib&gt;#include&lt;functional&gt;#include&lt;climits&gt;#include&lt;cctype&gt;#include&lt;iomanip&gt;using namespace std;typedef long long ll;#define INF 0x3f3f3f3f#define mod 1e9+7#define clr(a,x) memset(a,x,sizeof(a))const double eps = 1e-6;int t,n,a[10010];void solve()&#123; if(n%2) //判断棋子的个数是否为偶数 a[n++]=0; //是奇数，则新令一个棋子放在第一个位置上 sort(a,a+n); int x=0; for(int i=0;i&lt;n-1;i+=2) //每两个棋子的选 &#123; x^=(a[i+1]-a[i]-1); //每一堆石子的个数就是两个棋子的间隔 &#125; if(x) cout&lt;&lt;"Georgia will win"&lt;&lt;endl; else cout&lt;&lt;"Bob will win"&lt;&lt;endl;&#125;int main()&#123; int t; cin&gt;&gt;t; while(t--) &#123; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;a[i]; &#125; solve(); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>博弈</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
</search>
