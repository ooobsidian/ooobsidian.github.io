<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[POJ 3259 Wormholes (Bellman-Ford判断负环)]]></title>
    <url>%2F2017%2F08%2F07%2FPOJ-3259%2F</url>
    <content type="text"><![CDATA[题目DescriptionWhile exploring his many farms, Farmer John has discovered a number of amazing wormholes. A wormhole is very peculiar because it is a one-way path that delivers you to its destination at a time that is BEFORE you entered the wormhole! Each of FJ’s farms comprises $ N (1 \leq N \leq 500) $ fields conveniently numbered $1…N$, $M$ $(1 \leq M \leq 2500)$ paths, and $W$ $(1 \leq W \leq 200)$ wormholes. As FJ is an avid time-traveling fan, he wants to do the following: start at some field, travel through some paths and wormholes, and return to the starting field a time before his initial departure. Perhaps he will be able to meet himself :) .To help FJ find out whether this is possible or not, he will supply you with complete maps to $F$ $(1 \leq F \leq 5)$ of his farms. No paths will take longer than 10,000 seconds to travel and no wormhole can bring FJ back in time by more than $10,000$ seconds. InputLine $1$: A single integer, $F$. $F$ farm descriptions follow.Line $1$ of each farm: Three space-separated integers respectively: $N$ , $M$ , and $W$ Lines $2.. M+1$ of each farm: Three space-separated numbers $( S, E, T)$ that describe, respectively: a bidirectional path between $S$ and $E$ that requires $T$ seconds to traverse. Two fields might be connected by more than one path. Lines $M+2.. M+ W+1$ of each farm: Three space-separated numbers $( S, E, T)$ that describe, respectively: A one way path from $S$ to $E$ that also moves the traveler back $T$ seconds. OutputLines $1.. F$ : For each farm, output “YES” if FJ can achieve his goal, otherwise output “NO” (do not include the quotes). Sample Input1234567891023 3 11 2 21 3 42 3 13 1 33 2 11 2 32 3 43 1 8 Sample Output12NOYES HintFor farm $1$, FJ cannot travel back in time. For farm $2$ , FJ could travel back in time by the cycle $1\rightarrow2\rightarrow3\rightarrow1$ , arriving back at his starting location $1$ second before he leaves. He could start from anywhere on the cycle to accomplish this. 题意有一个人，他喜欢时间旅行，现在有一些虫洞，可以回到过去，现在有 $n$ 个点，$m$ 条边，代表现在可以走的通路，比如从 $a$ 到 $b$ 和从 $b$ 到 $a$ 需要花费 $c$ 时间，现在在地上出现了 $w$ 个虫洞，虫洞的意义就是你从 $a$ 到 $b$ 话费的时间是 $-c$ (时间倒流,并且虫洞是单向的)，现在问你从某个点开始走，能回到从前。现在让你判断他能不能回到从前。 思路题目的数据给出了每个点的坐标，这样就可以构成一张图，用 $\Bbb {Bellman-Ford}$ 算法判断该图中是否存在负环，如果存在，输出“YES”,否则输出“NO”。题目数据比较水，没有考虑重边的情况。。。可以套模板 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;cstdlib&gt;#include&lt;functional&gt;#include&lt;climits&gt;#include&lt;cctype&gt;#include&lt;iomanip&gt;using namespace std;typedef long long ll;#define INF 0x3f3f3f3f#define mod 1e9+7#define clr(a,x) memset(a,x,sizeof(a))const double eps = 1e-6;const int MAX_N=10000;const int MAX_E=10000;int From[MAX_E],To[MAX_E],W[MAX_E];int dis[MAX_N],tot;void init()&#123; tot=0;&#125;void add_edge(int u,int v,int d)&#123; From[tot]=u; To[tot]=v; W[tot++]=d;&#125;bool Bellman_ford(int s,int n)&#123; clr(dis,0x3f); dis[s]=0; for(int k=0;k&lt;n-1;k++) &#123; bool relaxed=0; for(int i=0;i&lt;tot;i++) &#123; int x=From[i],y=To[i]; if(dis[y]&gt;dis[x]+W[i]) &#123; dis[y]=dis[x]+W[i]; relaxed=1; &#125; &#125; if(!relaxed) break; &#125; for(int i=0;i&lt;tot;i++) if(dis[To[i]]&gt;dis[From[i]]+W[i]) return 1; return 0;&#125;int main()&#123; int f,n,m,t,u,v,w; cin&gt;&gt;f; while(f--) &#123; int num=0; init(); cin&gt;&gt;n&gt;&gt;m&gt;&gt;t;//*************************************建图 for(int i=0;i&lt;m;i++) &#123; cin&gt;&gt;u&gt;&gt;v&gt;&gt;w; add_edge(u,v,w); add_edge(v,u,w); num+=2; //记录边的个数 &#125; for(int i=0;i&lt;t;i++) &#123; cin&gt;&gt;u&gt;&gt;v&gt;&gt;w; add_edge(u,v,-w); &#125;//*************************************建图 bool ans=Bellman_ford(1,num); if(ans) cout&lt;&lt;"YES"&lt;&lt;endl; else cout&lt;&lt;"NO"&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ 1704]]></title>
    <url>%2F2017%2F08%2F06%2FMy-New-Post%2F</url>
    <content type="text"><![CDATA[题目DescriptionGeorgia and Bob decide to play a self-invented game. They draw a row of grids on paper, number the grids from left to right by $1$ , $2$ , $3$ , …, and place $N$ chessmen on different grids, as shown in the following figure for example: Georgia and Bob move the chessmen in turn. Every time a player will choose a chessman, and move it to the left without going over any other chessmen or across the left edge. The player can freely choose number of steps the chessman moves, with the constraint that the chessman must be moved at least ONE step and one grid can at most contains ONE single chessman. The player who cannot make a move loses the game. Georgia always plays first since “Lady first”. Suppose that Georgia and Bob both do their best in the game, i.e., if one of them knows a way to win the game, he or she will be able to carry it out. Given the initial positions of the $n$ chessmen, can you predict who will finally win the game? InputThe first line of the input contains a single integer $T$ $(1 \leq T \leq 20)$ , the number of test cases. Then $T$ cases follow. Each test case contains two lines. The first line consists of one integer $N$ $(1 \leq N \leq 1000)$ , indicating the number of chessmen. The second line contains $N$ different integers $P_1$ , $P_2$ … $P_n$ $(1 \leq P_i \leq 10000)$ , which are the initial positions of the $n$ chessmen. OutputFor each test case, prints a single line, “Georgia will win”, if Georgia will win the game; “Bob will win”, if Bob will win the game; otherwise ‘Not sure’. Sample Input12345231 2 381 5 6 7 9 12 14 17 Sample Output12Bob will winGeorgia will win 题意Georgia和Bob在玩游戏，排成直线的格子上放有 $n$ 个棋子。棋子 $i$ 在从左向右的第 $p_i$ 个格子上。两人轮流选择一个棋子向左移动，每次可以移动任意一格，但是不能超过其他的棋子，也不允许两个棋子放在一个格子里。假设二人足够聪明，当一方无法再进行移动棋子时，该方失败，Georgia先进行移动，问在每种条件下谁会获胜？ 思路棋子分为奇数和偶数两种情况. 当棋子个数为偶数时，我们就可以把棋子两辆看成一对，每对棋子就可以转化成 $Nim$ 游戏里的一堆石子,每堆石子的个数就可以用棋子之间的间隔来表示。 右边的棋子向左移动就相当于从一堆石子里取出石子，但是左边的棋子向左移动两个棋子之间的间隔变大，就和 $Nim$ 不相同了。但是，如果出现增加棋子间隔（增加石子）的情况：对手石子数增加，就让自己将所加部减回去就回到了之前的状态；反之，自己的石子数增加，那就让对手将所加的减回去就回到了之前的状态。 因此，这个游戏和 $Nim$ 游戏的胜负是一样的。 当棋子的个数为奇数时，将最左边的棋子与格子的最左边的间隔看作是一堆石子，同样也可以转化成 $Nim$ 。 $Nim$ 游戏的胜负只要判断在轮到每个人进行操作时，每次都用异或运算，就可以判断游戏的胜负。如： $a_1$ XOR $a_2$ XOR $···$ XOR $a_n$ $\neq$ $0$ $\Rightarrow$ 必胜态 $a_1$ XOR $a_2$ XOR $···$ XOR $a_n$ $=$ $0$ $\Rightarrow$ 必败态 至于题目里说的Not sure的情况，应该是不存在这种情况的。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;set&gt;#include&lt;map&gt;#include&lt;cstdlib&gt;#include&lt;functional&gt;#include&lt;climits&gt;#include&lt;cctype&gt;#include&lt;iomanip&gt;using namespace std;typedef long long ll;#define INF 0x3f3f3f3f#define mod 1e9+7#define clr(a,x) memset(a,x,sizeof(a))const double eps = 1e-6;int t,n,a[10010];void solve()&#123; if(n%2) //判断棋子的个数是否为偶数 a[n++]=0; //是奇数，则新令一个棋子放在第一个位置上 sort(a,a+n); int x=0; for(int i=0;i&lt;n-1;i+=2) //每两个棋子的选 &#123; x^=(a[i+1]-a[i]-1); //每一堆石子的个数就是两个棋子的间隔 &#125; if(x) cout&lt;&lt;"Georgia will win"&lt;&lt;endl; else cout&lt;&lt;"Bob will win"&lt;&lt;endl;&#125;int main()&#123; int t; cin&gt;&gt;t; while(t--) &#123; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;a[i]; &#125; solve(); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
